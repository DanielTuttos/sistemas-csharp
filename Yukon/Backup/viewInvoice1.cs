//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Yukon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class viewInvoice1 : DataSet {
        
        private InvoiceDataTable tableInvoice;
        
        public viewInvoice1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected viewInvoice1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Invoice"] != null)) {
                    this.Tables.Add(new InvoiceDataTable(ds.Tables["Invoice"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDataTable Invoice {
            get {
                return this.tableInvoice;
            }
        }
        
        public override DataSet Clone() {
            viewInvoice1 cln = ((viewInvoice1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Invoice"] != null)) {
                this.Tables.Add(new InvoiceDataTable(ds.Tables["Invoice"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInvoice = ((InvoiceDataTable)(this.Tables["Invoice"]));
            if ((this.tableInvoice != null)) {
                this.tableInvoice.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "viewInvoice";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/viewInvoice.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInvoice = new InvoiceDataTable();
            this.Tables.Add(this.tableInvoice);
        }
        
        private bool ShouldSerializeInvoice() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InvoiceRowChangeEventHandler(object sender, InvoiceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAddress;
            
            private DataColumn columnAmountDue;
            
            private DataColumn columnAmountPaid;
            
            private DataColumn columnAmpherName;
            
            private DataColumn columnArrivalDate;
            
            private DataColumn columnCRate;
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnCustomerName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnDRate;
            
            private DataColumn columnDriverCommision;
            
            private DataColumn columnDriverName;
            
            private DataColumn columnInsurance;
            
            private DataColumn columnInvoiceID;
            
            private DataColumn columnLRate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnPrice;
            
            private DataColumn columnProductID;
            
            private DataColumn columnProductName;
            
            private DataColumn columnProvinceName;
            
            private DataColumn columnShippingDate;
            
            private DataColumn columnTotalCost;
            
            private DataColumn columnWeight;
            
            internal InvoiceDataTable() : 
                    base("Invoice") {
                this.InitClass();
            }
            
            internal InvoiceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn AmountDueColumn {
                get {
                    return this.columnAmountDue;
                }
            }
            
            internal DataColumn AmountPaidColumn {
                get {
                    return this.columnAmountPaid;
                }
            }
            
            internal DataColumn AmpherNameColumn {
                get {
                    return this.columnAmpherName;
                }
            }
            
            internal DataColumn ArrivalDateColumn {
                get {
                    return this.columnArrivalDate;
                }
            }
            
            internal DataColumn CRateColumn {
                get {
                    return this.columnCRate;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn DRateColumn {
                get {
                    return this.columnDRate;
                }
            }
            
            internal DataColumn DriverCommisionColumn {
                get {
                    return this.columnDriverCommision;
                }
            }
            
            internal DataColumn DriverNameColumn {
                get {
                    return this.columnDriverName;
                }
            }
            
            internal DataColumn InsuranceColumn {
                get {
                    return this.columnInsurance;
                }
            }
            
            internal DataColumn InvoiceIDColumn {
                get {
                    return this.columnInvoiceID;
                }
            }
            
            internal DataColumn LRateColumn {
                get {
                    return this.columnLRate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            internal DataColumn ProvinceNameColumn {
                get {
                    return this.columnProvinceName;
                }
            }
            
            internal DataColumn ShippingDateColumn {
                get {
                    return this.columnShippingDate;
                }
            }
            
            internal DataColumn TotalCostColumn {
                get {
                    return this.columnTotalCost;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            public InvoiceRow this[int index] {
                get {
                    return ((InvoiceRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceRowChangeEventHandler InvoiceRowChanged;
            
            public event InvoiceRowChangeEventHandler InvoiceRowChanging;
            
            public event InvoiceRowChangeEventHandler InvoiceRowDeleted;
            
            public event InvoiceRowChangeEventHandler InvoiceRowDeleting;
            
            public void AddInvoiceRow(InvoiceRow row) {
                this.Rows.Add(row);
            }
            
            public InvoiceRow AddInvoiceRow(
                        string Address, 
                        System.Decimal AmountDue, 
                        System.Decimal AmountPaid, 
                        string AmpherName, 
                        System.DateTime ArrivalDate, 
                        System.Double CRate, 
                        int CustomerID, 
                        string CustomerName, 
                        string Description, 
                        System.Double DRate, 
                        System.Decimal DriverCommision, 
                        string DriverName, 
                        System.Decimal Insurance, 
                        System.Double LRate, 
                        string PaymentType, 
                        System.Decimal Price, 
                        int ProductID, 
                        string ProductName, 
                        string ProvinceName, 
                        System.DateTime ShippingDate, 
                        System.Decimal TotalCost, 
                        int Weight) {
                InvoiceRow rowInvoiceRow = ((InvoiceRow)(this.NewRow()));
                rowInvoiceRow.ItemArray = new object[] {
                        Address,
                        AmountDue,
                        AmountPaid,
                        AmpherName,
                        ArrivalDate,
                        CRate,
                        CustomerID,
                        CustomerName,
                        Description,
                        DRate,
                        DriverCommision,
                        DriverName,
                        Insurance,
                        null,
                        LRate,
                        PaymentType,
                        Price,
                        ProductID,
                        ProductName,
                        ProvinceName,
                        ShippingDate,
                        TotalCost,
                        Weight};
                this.Rows.Add(rowInvoiceRow);
                return rowInvoiceRow;
            }
            
            public InvoiceRow FindByInvoiceID(int InvoiceID) {
                return ((InvoiceRow)(this.Rows.Find(new object[] {
                            InvoiceID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InvoiceDataTable cln = ((InvoiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InvoiceDataTable();
            }
            
            internal void InitVars() {
                this.columnAddress = this.Columns["Address"];
                this.columnAmountDue = this.Columns["AmountDue"];
                this.columnAmountPaid = this.Columns["AmountPaid"];
                this.columnAmpherName = this.Columns["AmpherName"];
                this.columnArrivalDate = this.Columns["ArrivalDate"];
                this.columnCRate = this.Columns["CRate"];
                this.columnCustomerID = this.Columns["CustomerID"];
                this.columnCustomerName = this.Columns["CustomerName"];
                this.columnDescription = this.Columns["Description"];
                this.columnDRate = this.Columns["DRate"];
                this.columnDriverCommision = this.Columns["DriverCommision"];
                this.columnDriverName = this.Columns["DriverName"];
                this.columnInsurance = this.Columns["Insurance"];
                this.columnInvoiceID = this.Columns["InvoiceID"];
                this.columnLRate = this.Columns["LRate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnPrice = this.Columns["Price"];
                this.columnProductID = this.Columns["ProductID"];
                this.columnProductName = this.Columns["ProductName"];
                this.columnProvinceName = this.Columns["ProvinceName"];
                this.columnShippingDate = this.Columns["ShippingDate"];
                this.columnTotalCost = this.Columns["TotalCost"];
                this.columnWeight = this.Columns["Weight"];
            }
            
            private void InitClass() {
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnAmountDue = new DataColumn("AmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountDue);
                this.columnAmountPaid = new DataColumn("AmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountPaid);
                this.columnAmpherName = new DataColumn("AmpherName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmpherName);
                this.columnArrivalDate = new DataColumn("ArrivalDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArrivalDate);
                this.columnCRate = new DataColumn("CRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRate);
                this.columnCustomerID = new DataColumn("CustomerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.columnCustomerName = new DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnDRate = new DataColumn("DRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDRate);
                this.columnDriverCommision = new DataColumn("DriverCommision", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverCommision);
                this.columnDriverName = new DataColumn("DriverName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDriverName);
                this.columnInsurance = new DataColumn("Insurance", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInsurance);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceID);
                this.columnLRate = new DataColumn("LRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLRate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnPrice = new DataColumn("Price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnProductID = new DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductID);
                this.columnProductName = new DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductName);
                this.columnProvinceName = new DataColumn("ProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceName);
                this.columnShippingDate = new DataColumn("ShippingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShippingDate);
                this.columnTotalCost = new DataColumn("TotalCost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalCost);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnInvoiceID}, true));
                this.columnInvoiceID.AutoIncrement = true;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnInvoiceID.Unique = true;
            }
            
            public InvoiceRow NewInvoiceRow() {
                return ((InvoiceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InvoiceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InvoiceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceRowChanged != null)) {
                    this.InvoiceRowChanged(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceRowChanging != null)) {
                    this.InvoiceRowChanging(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceRowDeleted != null)) {
                    this.InvoiceRowDeleted(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceRowDeleting != null)) {
                    this.InvoiceRowDeleting(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInvoiceRow(InvoiceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceRow : DataRow {
            
            private InvoiceDataTable tableInvoice;
            
            internal InvoiceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoice = ((InvoiceDataTable)(this.Table));
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AddressColumn] = value;
                }
            }
            
            public System.Decimal AmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.AmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.AmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AmountPaidColumn] = value;
                }
            }
            
            public string AmpherName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.AmpherNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AmpherNameColumn] = value;
                }
            }
            
            public System.DateTime ArrivalDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoice.ArrivalDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.ArrivalDateColumn] = value;
                }
            }
            
            public System.Double CRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableInvoice.CRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.CRateColumn] = value;
                }
            }
            
            public int CustomerID {
                get {
                    try {
                        return ((int)(this[this.tableInvoice.CustomerIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.CustomerIDColumn] = value;
                }
            }
            
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.CustomerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.CustomerNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.DescriptionColumn] = value;
                }
            }
            
            public System.Double DRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableInvoice.DRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.DRateColumn] = value;
                }
            }
            
            public System.Decimal DriverCommision {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.DriverCommisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.DriverCommisionColumn] = value;
                }
            }
            
            public string DriverName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.DriverNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.DriverNameColumn] = value;
                }
            }
            
            public System.Decimal Insurance {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.InsuranceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.InsuranceColumn] = value;
                }
            }
            
            public int InvoiceID {
                get {
                    return ((int)(this[this.tableInvoice.InvoiceIDColumn]));
                }
                set {
                    this[this.tableInvoice.InvoiceIDColumn] = value;
                }
            }
            
            public System.Double LRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableInvoice.LRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.LRateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.PaymentTypeColumn] = value;
                }
            }
            
            public System.Decimal Price {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.PriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.PriceColumn] = value;
                }
            }
            
            public int ProductID {
                get {
                    try {
                        return ((int)(this[this.tableInvoice.ProductIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.ProductIDColumn] = value;
                }
            }
            
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.ProductNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.ProductNameColumn] = value;
                }
            }
            
            public string ProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.ProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.ProvinceNameColumn] = value;
                }
            }
            
            public System.DateTime ShippingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoice.ShippingDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.ShippingDateColumn] = value;
                }
            }
            
            public System.Decimal TotalCost {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.TotalCostColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.TotalCostColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableInvoice.WeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.WeightColumn] = value;
                }
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableInvoice.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableInvoice.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountDueNull() {
                return this.IsNull(this.tableInvoice.AmountDueColumn);
            }
            
            public void SetAmountDueNull() {
                this[this.tableInvoice.AmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountPaidNull() {
                return this.IsNull(this.tableInvoice.AmountPaidColumn);
            }
            
            public void SetAmountPaidNull() {
                this[this.tableInvoice.AmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmpherNameNull() {
                return this.IsNull(this.tableInvoice.AmpherNameColumn);
            }
            
            public void SetAmpherNameNull() {
                this[this.tableInvoice.AmpherNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsArrivalDateNull() {
                return this.IsNull(this.tableInvoice.ArrivalDateColumn);
            }
            
            public void SetArrivalDateNull() {
                this[this.tableInvoice.ArrivalDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCRateNull() {
                return this.IsNull(this.tableInvoice.CRateColumn);
            }
            
            public void SetCRateNull() {
                this[this.tableInvoice.CRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableInvoice.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tableInvoice.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableInvoice.CustomerNameColumn);
            }
            
            public void SetCustomerNameNull() {
                this[this.tableInvoice.CustomerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableInvoice.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableInvoice.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsDRateNull() {
                return this.IsNull(this.tableInvoice.DRateColumn);
            }
            
            public void SetDRateNull() {
                this[this.tableInvoice.DRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverCommisionNull() {
                return this.IsNull(this.tableInvoice.DriverCommisionColumn);
            }
            
            public void SetDriverCommisionNull() {
                this[this.tableInvoice.DriverCommisionColumn] = System.Convert.DBNull;
            }
            
            public bool IsDriverNameNull() {
                return this.IsNull(this.tableInvoice.DriverNameColumn);
            }
            
            public void SetDriverNameNull() {
                this[this.tableInvoice.DriverNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsInsuranceNull() {
                return this.IsNull(this.tableInvoice.InsuranceColumn);
            }
            
            public void SetInsuranceNull() {
                this[this.tableInvoice.InsuranceColumn] = System.Convert.DBNull;
            }
            
            public bool IsLRateNull() {
                return this.IsNull(this.tableInvoice.LRateColumn);
            }
            
            public void SetLRateNull() {
                this[this.tableInvoice.LRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableInvoice.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableInvoice.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriceNull() {
                return this.IsNull(this.tableInvoice.PriceColumn);
            }
            
            public void SetPriceNull() {
                this[this.tableInvoice.PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsProductIDNull() {
                return this.IsNull(this.tableInvoice.ProductIDColumn);
            }
            
            public void SetProductIDNull() {
                this[this.tableInvoice.ProductIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProductNameNull() {
                return this.IsNull(this.tableInvoice.ProductNameColumn);
            }
            
            public void SetProductNameNull() {
                this[this.tableInvoice.ProductNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceNameNull() {
                return this.IsNull(this.tableInvoice.ProvinceNameColumn);
            }
            
            public void SetProvinceNameNull() {
                this[this.tableInvoice.ProvinceNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsShippingDateNull() {
                return this.IsNull(this.tableInvoice.ShippingDateColumn);
            }
            
            public void SetShippingDateNull() {
                this[this.tableInvoice.ShippingDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalCostNull() {
                return this.IsNull(this.tableInvoice.TotalCostColumn);
            }
            
            public void SetTotalCostNull() {
                this[this.tableInvoice.TotalCostColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tableInvoice.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tableInvoice.WeightColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceRowChangeEvent : EventArgs {
            
            private InvoiceRow eventRow;
            
            private DataRowAction eventAction;
            
            public InvoiceRowChangeEvent(InvoiceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InvoiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
