//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Yukon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class debtListSet : DataSet {
        
        private InvoiceDataTable tableInvoice;
        
        public debtListSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected debtListSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Invoice"] != null)) {
                    this.Tables.Add(new InvoiceDataTable(ds.Tables["Invoice"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDataTable Invoice {
            get {
                return this.tableInvoice;
            }
        }
        
        public override DataSet Clone() {
            debtListSet cln = ((debtListSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Invoice"] != null)) {
                this.Tables.Add(new InvoiceDataTable(ds.Tables["Invoice"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInvoice = ((InvoiceDataTable)(this.Tables["Invoice"]));
            if ((this.tableInvoice != null)) {
                this.tableInvoice.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "debtListSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/debtListSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInvoice = new InvoiceDataTable();
            this.Tables.Add(this.tableInvoice);
        }
        
        private bool ShouldSerializeInvoice() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InvoiceRowChangeEventHandler(object sender, InvoiceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInvoiceID;
            
            private DataColumn columnCustomerName;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnTotalCost;
            
            private DataColumn columnAmountPaid;
            
            private DataColumn columnAmountDue;
            
            internal InvoiceDataTable() : 
                    base("Invoice") {
                this.InitClass();
            }
            
            internal InvoiceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InvoiceIDColumn {
                get {
                    return this.columnInvoiceID;
                }
            }
            
            internal DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn TotalCostColumn {
                get {
                    return this.columnTotalCost;
                }
            }
            
            internal DataColumn AmountPaidColumn {
                get {
                    return this.columnAmountPaid;
                }
            }
            
            internal DataColumn AmountDueColumn {
                get {
                    return this.columnAmountDue;
                }
            }
            
            public InvoiceRow this[int index] {
                get {
                    return ((InvoiceRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceRowChangeEventHandler InvoiceRowChanged;
            
            public event InvoiceRowChangeEventHandler InvoiceRowChanging;
            
            public event InvoiceRowChangeEventHandler InvoiceRowDeleted;
            
            public event InvoiceRowChangeEventHandler InvoiceRowDeleting;
            
            public void AddInvoiceRow(InvoiceRow row) {
                this.Rows.Add(row);
            }
            
            public InvoiceRow AddInvoiceRow(string CustomerName, string PaymentType, System.Decimal TotalCost, System.Decimal AmountPaid, System.Decimal AmountDue) {
                InvoiceRow rowInvoiceRow = ((InvoiceRow)(this.NewRow()));
                rowInvoiceRow.ItemArray = new object[] {
                        null,
                        CustomerName,
                        PaymentType,
                        TotalCost,
                        AmountPaid,
                        AmountDue};
                this.Rows.Add(rowInvoiceRow);
                return rowInvoiceRow;
            }
            
            public InvoiceRow FindByInvoiceID(int InvoiceID) {
                return ((InvoiceRow)(this.Rows.Find(new object[] {
                            InvoiceID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InvoiceDataTable cln = ((InvoiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InvoiceDataTable();
            }
            
            internal void InitVars() {
                this.columnInvoiceID = this.Columns["InvoiceID"];
                this.columnCustomerName = this.Columns["CustomerName"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnTotalCost = this.Columns["TotalCost"];
                this.columnAmountPaid = this.Columns["AmountPaid"];
                this.columnAmountDue = this.Columns["AmountDue"];
            }
            
            private void InitClass() {
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInvoiceID);
                this.columnCustomerName = new DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerName);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnTotalCost = new DataColumn("TotalCost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalCost);
                this.columnAmountPaid = new DataColumn("AmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountPaid);
                this.columnAmountDue = new DataColumn("AmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountDue);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnInvoiceID}, true));
                this.columnInvoiceID.AutoIncrement = true;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnInvoiceID.Unique = true;
            }
            
            public InvoiceRow NewInvoiceRow() {
                return ((InvoiceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InvoiceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InvoiceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceRowChanged != null)) {
                    this.InvoiceRowChanged(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceRowChanging != null)) {
                    this.InvoiceRowChanging(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceRowDeleted != null)) {
                    this.InvoiceRowDeleted(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceRowDeleting != null)) {
                    this.InvoiceRowDeleting(this, new InvoiceRowChangeEvent(((InvoiceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInvoiceRow(InvoiceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceRow : DataRow {
            
            private InvoiceDataTable tableInvoice;
            
            internal InvoiceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoice = ((InvoiceDataTable)(this.Table));
            }
            
            public int InvoiceID {
                get {
                    return ((int)(this[this.tableInvoice.InvoiceIDColumn]));
                }
                set {
                    this[this.tableInvoice.InvoiceIDColumn] = value;
                }
            }
            
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.CustomerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.CustomerNameColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableInvoice.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.PaymentTypeColumn] = value;
                }
            }
            
            public System.Decimal TotalCost {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.TotalCostColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.TotalCostColumn] = value;
                }
            }
            
            public System.Decimal AmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.AmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AmountPaidColumn] = value;
                }
            }
            
            public System.Decimal AmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInvoice.AmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoice.AmountDueColumn] = value;
                }
            }
            
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableInvoice.CustomerNameColumn);
            }
            
            public void SetCustomerNameNull() {
                this[this.tableInvoice.CustomerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableInvoice.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableInvoice.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalCostNull() {
                return this.IsNull(this.tableInvoice.TotalCostColumn);
            }
            
            public void SetTotalCostNull() {
                this[this.tableInvoice.TotalCostColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountPaidNull() {
                return this.IsNull(this.tableInvoice.AmountPaidColumn);
            }
            
            public void SetAmountPaidNull() {
                this[this.tableInvoice.AmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountDueNull() {
                return this.IsNull(this.tableInvoice.AmountDueColumn);
            }
            
            public void SetAmountDueNull() {
                this[this.tableInvoice.AmountDueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InvoiceRowChangeEvent : EventArgs {
            
            private InvoiceRow eventRow;
            
            private DataRowAction eventAction;
            
            public InvoiceRowChangeEvent(InvoiceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InvoiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
