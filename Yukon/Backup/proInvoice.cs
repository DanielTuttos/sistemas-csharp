//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Yukon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class proInvoice : DataSet {
        
        private ProvinceDataTable tableProvince;
        
        public proInvoice() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected proInvoice(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Province"] != null)) {
                    this.Tables.Add(new ProvinceDataTable(ds.Tables["Province"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProvinceDataTable Province {
            get {
                return this.tableProvince;
            }
        }
        
        public override DataSet Clone() {
            proInvoice cln = ((proInvoice)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Province"] != null)) {
                this.Tables.Add(new ProvinceDataTable(ds.Tables["Province"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProvince = ((ProvinceDataTable)(this.Tables["Province"]));
            if ((this.tableProvince != null)) {
                this.tableProvince.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "proInvoice";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/proInvoice.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProvince = new ProvinceDataTable();
            this.Tables.Add(this.tableProvince);
        }
        
        private bool ShouldSerializeProvince() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProvinceRowChangeEventHandler(object sender, ProvinceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProvinceID;
            
            private DataColumn columnProvinceName;
            
            internal ProvinceDataTable() : 
                    base("Province") {
                this.InitClass();
            }
            
            internal ProvinceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProvinceIDColumn {
                get {
                    return this.columnProvinceID;
                }
            }
            
            internal DataColumn ProvinceNameColumn {
                get {
                    return this.columnProvinceName;
                }
            }
            
            public ProvinceRow this[int index] {
                get {
                    return ((ProvinceRow)(this.Rows[index]));
                }
            }
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanged;
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanging;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleted;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleting;
            
            public void AddProvinceRow(ProvinceRow row) {
                this.Rows.Add(row);
            }
            
            public ProvinceRow AddProvinceRow(string ProvinceName) {
                ProvinceRow rowProvinceRow = ((ProvinceRow)(this.NewRow()));
                rowProvinceRow.ItemArray = new object[] {
                        null,
                        ProvinceName};
                this.Rows.Add(rowProvinceRow);
                return rowProvinceRow;
            }
            
            public ProvinceRow FindByProvinceID(int ProvinceID) {
                return ((ProvinceRow)(this.Rows.Find(new object[] {
                            ProvinceID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProvinceDataTable cln = ((ProvinceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProvinceDataTable();
            }
            
            internal void InitVars() {
                this.columnProvinceID = this.Columns["ProvinceID"];
                this.columnProvinceName = this.Columns["ProvinceName"];
            }
            
            private void InitClass() {
                this.columnProvinceID = new DataColumn("ProvinceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceID);
                this.columnProvinceName = new DataColumn("ProvinceName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProvinceID}, true));
                this.columnProvinceID.AutoIncrement = true;
                this.columnProvinceID.AllowDBNull = false;
                this.columnProvinceID.Unique = true;
            }
            
            public ProvinceRow NewProvinceRow() {
                return ((ProvinceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProvinceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProvinceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProvinceRowChanged != null)) {
                    this.ProvinceRowChanged(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProvinceRowChanging != null)) {
                    this.ProvinceRowChanging(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProvinceRowDeleted != null)) {
                    this.ProvinceRowDeleted(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProvinceRowDeleting != null)) {
                    this.ProvinceRowDeleting(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProvinceRow(ProvinceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRow : DataRow {
            
            private ProvinceDataTable tableProvince;
            
            internal ProvinceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProvince = ((ProvinceDataTable)(this.Table));
            }
            
            public int ProvinceID {
                get {
                    return ((int)(this[this.tableProvince.ProvinceIDColumn]));
                }
                set {
                    this[this.tableProvince.ProvinceIDColumn] = value;
                }
            }
            
            public string ProvinceName {
                get {
                    try {
                        return ((string)(this[this.tableProvince.ProvinceNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProvince.ProvinceNameColumn] = value;
                }
            }
            
            public bool IsProvinceNameNull() {
                return this.IsNull(this.tableProvince.ProvinceNameColumn);
            }
            
            public void SetProvinceNameNull() {
                this[this.tableProvince.ProvinceNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRowChangeEvent : EventArgs {
            
            private ProvinceRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProvinceRowChangeEvent(ProvinceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProvinceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
