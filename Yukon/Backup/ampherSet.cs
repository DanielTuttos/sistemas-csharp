//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Yukon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ampherSet : DataSet {
        
        private AmpherDataTable tableAmpher;
        
        public ampherSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ampherSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Ampher"] != null)) {
                    this.Tables.Add(new AmpherDataTable(ds.Tables["Ampher"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AmpherDataTable Ampher {
            get {
                return this.tableAmpher;
            }
        }
        
        public override DataSet Clone() {
            ampherSet cln = ((ampherSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Ampher"] != null)) {
                this.Tables.Add(new AmpherDataTable(ds.Tables["Ampher"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAmpher = ((AmpherDataTable)(this.Tables["Ampher"]));
            if ((this.tableAmpher != null)) {
                this.tableAmpher.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ampherSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ampherSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAmpher = new AmpherDataTable();
            this.Tables.Add(this.tableAmpher);
        }
        
        private bool ShouldSerializeAmpher() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AmpherRowChangeEventHandler(object sender, AmpherRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmpherDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAmpherID;
            
            private DataColumn columnAmpherName;
            
            private DataColumn columnCRate;
            
            private DataColumn columnDRate;
            
            private DataColumn columnLRate;
            
            private DataColumn columnProvinceID;
            
            internal AmpherDataTable() : 
                    base("Ampher") {
                this.InitClass();
            }
            
            internal AmpherDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AmpherIDColumn {
                get {
                    return this.columnAmpherID;
                }
            }
            
            internal DataColumn AmpherNameColumn {
                get {
                    return this.columnAmpherName;
                }
            }
            
            internal DataColumn CRateColumn {
                get {
                    return this.columnCRate;
                }
            }
            
            internal DataColumn DRateColumn {
                get {
                    return this.columnDRate;
                }
            }
            
            internal DataColumn LRateColumn {
                get {
                    return this.columnLRate;
                }
            }
            
            internal DataColumn ProvinceIDColumn {
                get {
                    return this.columnProvinceID;
                }
            }
            
            public AmpherRow this[int index] {
                get {
                    return ((AmpherRow)(this.Rows[index]));
                }
            }
            
            public event AmpherRowChangeEventHandler AmpherRowChanged;
            
            public event AmpherRowChangeEventHandler AmpherRowChanging;
            
            public event AmpherRowChangeEventHandler AmpherRowDeleted;
            
            public event AmpherRowChangeEventHandler AmpherRowDeleting;
            
            public void AddAmpherRow(AmpherRow row) {
                this.Rows.Add(row);
            }
            
            public AmpherRow AddAmpherRow(string AmpherName, string CRate, string DRate, string LRate, int ProvinceID) {
                AmpherRow rowAmpherRow = ((AmpherRow)(this.NewRow()));
                rowAmpherRow.ItemArray = new object[] {
                        null,
                        AmpherName,
                        CRate,
                        DRate,
                        LRate,
                        ProvinceID};
                this.Rows.Add(rowAmpherRow);
                return rowAmpherRow;
            }
            
            public AmpherRow FindByAmpherID(int AmpherID) {
                return ((AmpherRow)(this.Rows.Find(new object[] {
                            AmpherID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AmpherDataTable cln = ((AmpherDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AmpherDataTable();
            }
            
            internal void InitVars() {
                this.columnAmpherID = this.Columns["AmpherID"];
                this.columnAmpherName = this.Columns["AmpherName"];
                this.columnCRate = this.Columns["CRate"];
                this.columnDRate = this.Columns["DRate"];
                this.columnLRate = this.Columns["LRate"];
                this.columnProvinceID = this.Columns["ProvinceID"];
            }
            
            private void InitClass() {
                this.columnAmpherID = new DataColumn("AmpherID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmpherID);
                this.columnAmpherName = new DataColumn("AmpherName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmpherName);
                this.columnCRate = new DataColumn("CRate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRate);
                this.columnDRate = new DataColumn("DRate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDRate);
                this.columnLRate = new DataColumn("LRate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLRate);
                this.columnProvinceID = new DataColumn("ProvinceID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAmpherID}, true));
                this.columnAmpherID.AutoIncrement = true;
                this.columnAmpherID.AllowDBNull = false;
                this.columnAmpherID.Unique = true;
            }
            
            public AmpherRow NewAmpherRow() {
                return ((AmpherRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AmpherRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AmpherRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AmpherRowChanged != null)) {
                    this.AmpherRowChanged(this, new AmpherRowChangeEvent(((AmpherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AmpherRowChanging != null)) {
                    this.AmpherRowChanging(this, new AmpherRowChangeEvent(((AmpherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AmpherRowDeleted != null)) {
                    this.AmpherRowDeleted(this, new AmpherRowChangeEvent(((AmpherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AmpherRowDeleting != null)) {
                    this.AmpherRowDeleting(this, new AmpherRowChangeEvent(((AmpherRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAmpherRow(AmpherRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmpherRow : DataRow {
            
            private AmpherDataTable tableAmpher;
            
            internal AmpherRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAmpher = ((AmpherDataTable)(this.Table));
            }
            
            public int AmpherID {
                get {
                    return ((int)(this[this.tableAmpher.AmpherIDColumn]));
                }
                set {
                    this[this.tableAmpher.AmpherIDColumn] = value;
                }
            }
            
            public string AmpherName {
                get {
                    try {
                        return ((string)(this[this.tableAmpher.AmpherNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmpher.AmpherNameColumn] = value;
                }
            }
            
            public string CRate {
                get {
                    try {
                        return ((string)(this[this.tableAmpher.CRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmpher.CRateColumn] = value;
                }
            }
            
            public string DRate {
                get {
                    try {
                        return ((string)(this[this.tableAmpher.DRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmpher.DRateColumn] = value;
                }
            }
            
            public string LRate {
                get {
                    try {
                        return ((string)(this[this.tableAmpher.LRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmpher.LRateColumn] = value;
                }
            }
            
            public int ProvinceID {
                get {
                    try {
                        return ((int)(this[this.tableAmpher.ProvinceIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmpher.ProvinceIDColumn] = value;
                }
            }
            
            public bool IsAmpherNameNull() {
                return this.IsNull(this.tableAmpher.AmpherNameColumn);
            }
            
            public void SetAmpherNameNull() {
                this[this.tableAmpher.AmpherNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCRateNull() {
                return this.IsNull(this.tableAmpher.CRateColumn);
            }
            
            public void SetCRateNull() {
                this[this.tableAmpher.CRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsDRateNull() {
                return this.IsNull(this.tableAmpher.DRateColumn);
            }
            
            public void SetDRateNull() {
                this[this.tableAmpher.DRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsLRateNull() {
                return this.IsNull(this.tableAmpher.LRateColumn);
            }
            
            public void SetLRateNull() {
                this[this.tableAmpher.LRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceIDNull() {
                return this.IsNull(this.tableAmpher.ProvinceIDColumn);
            }
            
            public void SetProvinceIDNull() {
                this[this.tableAmpher.ProvinceIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AmpherRowChangeEvent : EventArgs {
            
            private AmpherRow eventRow;
            
            private DataRowAction eventAction;
            
            public AmpherRowChangeEvent(AmpherRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AmpherRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
