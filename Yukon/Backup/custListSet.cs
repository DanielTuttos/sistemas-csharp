//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Yukon {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class custListSet : DataSet {
        
        private CustomerDataTable tableCustomer;
        
        public custListSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected custListSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Customer"] != null)) {
                    this.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer {
            get {
                return this.tableCustomer;
            }
        }
        
        public override DataSet Clone() {
            custListSet cln = ((custListSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Customer"] != null)) {
                this.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCustomer = ((CustomerDataTable)(this.Tables["Customer"]));
            if ((this.tableCustomer != null)) {
                this.tableCustomer.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "custListSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/custListSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCustomer = new CustomerDataTable();
            this.Tables.Add(this.tableCustomer);
        }
        
        private bool ShouldSerializeCustomer() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCustomerID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnCustomerStatus;
            
            private DataColumn columnAddress;
            
            private DataColumn columnCity;
            
            private DataColumn columnCRate;
            
            private DataColumn columnEmail;
            
            private DataColumn columnFax;
            
            private DataColumn columnPhone;
            
            private DataColumn columnZipcode;
            
            internal CustomerDataTable() : 
                    base("Customer") {
                this.InitClass();
            }
            
            internal CustomerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn CustomerStatusColumn {
                get {
                    return this.columnCustomerStatus;
                }
            }
            
            internal DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn CRateColumn {
                get {
                    return this.columnCRate;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal DataColumn ZipcodeColumn {
                get {
                    return this.columnZipcode;
                }
            }
            
            public CustomerRow this[int index] {
                get {
                    return ((CustomerRow)(this.Rows[index]));
                }
            }
            
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
            public void AddCustomerRow(CustomerRow row) {
                this.Rows.Add(row);
            }
            
            public CustomerRow AddCustomerRow(string FirstName, string LastName, string CustomerStatus, string Address, string City, System.Double CRate, string Email, string Fax, int Phone, int Zipcode) {
                CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
                rowCustomerRow.ItemArray = new object[] {
                        null,
                        FirstName,
                        LastName,
                        CustomerStatus,
                        Address,
                        City,
                        CRate,
                        Email,
                        Fax,
                        Phone,
                        Zipcode};
                this.Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }
            
            public CustomerRow FindByCustomerID(int CustomerID) {
                return ((CustomerRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CustomerDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomerID = this.Columns["CustomerID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnCustomerStatus = this.Columns["CustomerStatus"];
                this.columnAddress = this.Columns["Address"];
                this.columnCity = this.Columns["City"];
                this.columnCRate = this.Columns["CRate"];
                this.columnEmail = this.Columns["Email"];
                this.columnFax = this.Columns["Fax"];
                this.columnPhone = this.Columns["Phone"];
                this.columnZipcode = this.Columns["Zipcode"];
            }
            
            private void InitClass() {
                this.columnCustomerID = new DataColumn("CustomerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnCustomerStatus = new DataColumn("CustomerStatus", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerStatus);
                this.columnAddress = new DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnCRate = new DataColumn("CRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRate);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnFax = new DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFax);
                this.columnPhone = new DataColumn("Phone", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnZipcode = new DataColumn("Zipcode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZipcode);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AutoIncrement = true;
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.Unique = true;
            }
            
            public CustomerRow NewCustomerRow() {
                return ((CustomerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CustomerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerRowChanged != null)) {
                    this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerRowChanging != null)) {
                    this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerRowDeleted != null)) {
                    this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerRowDeleting != null)) {
                    this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCustomerRow(CustomerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomerRow : DataRow {
            
            private CustomerDataTable tableCustomer;
            
            internal CustomerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomer = ((CustomerDataTable)(this.Table));
            }
            
            public int CustomerID {
                get {
                    return ((int)(this[this.tableCustomer.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomer.CustomerIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.LastNameColumn] = value;
                }
            }
            
            public string CustomerStatus {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CustomerStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CustomerStatusColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.AddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CityColumn] = value;
                }
            }
            
            public System.Double CRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableCustomer.CRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CRateColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.EmailColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.FaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.FaxColumn] = value;
                }
            }
            
            public int Phone {
                get {
                    try {
                        return ((int)(this[this.tableCustomer.PhoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.PhoneColumn] = value;
                }
            }
            
            public int Zipcode {
                get {
                    try {
                        return ((int)(this[this.tableCustomer.ZipcodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.ZipcodeColumn] = value;
                }
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableCustomer.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableCustomer.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableCustomer.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableCustomer.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerStatusNull() {
                return this.IsNull(this.tableCustomer.CustomerStatusColumn);
            }
            
            public void SetCustomerStatusNull() {
                this[this.tableCustomer.CustomerStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomer.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableCustomer.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomer.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableCustomer.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsCRateNull() {
                return this.IsNull(this.tableCustomer.CRateColumn);
            }
            
            public void SetCRateNull() {
                this[this.tableCustomer.CRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableCustomer.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableCustomer.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableCustomer.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableCustomer.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCustomer.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableCustomer.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsZipcodeNull() {
                return this.IsNull(this.tableCustomer.ZipcodeColumn);
            }
            
            public void SetZipcodeNull() {
                this[this.tableCustomer.ZipcodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CustomerRowChangeEvent : EventArgs {
            
            private CustomerRow eventRow;
            
            private DataRowAction eventAction;
            
            public CustomerRowChangeEvent(CustomerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
